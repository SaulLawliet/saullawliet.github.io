#+TITLE: GIT 笔记
#+LANGUAGE: en
#+OPTIONS: H:3 num:nil toc:t \n:nil @:t ::t |:t ^:nil -:t f:nil *:t TeX:nil LaTeX:nil skip:nil d:nil tags:not-in-toc

-----

* 获得帮助
#+BEGIN_EXAMPLE
$ git help

# 获取指定命令的帮助
$ git help <command>
#+END_EXAMPLE

* 全局设置
#+BEGIN_EXAMPLE
$ git config --global user.name "saul"
$ git config --global user.email "saul@example.com"
$ git config --global color.ui true
#+END_EXAMPLE

* 基本操作
workflow:
#+BEGIN_EXAMPLE
	     +-----------+   +-----------+   +------------+   +------------+
	     |           |   |           |   |   Local    |   |   Remote   |
	     | Workspace |   |  Staging  |   | Repository |   | Repository |
	     +-----------+   +-----------+   +------------+   +------------+
		   |               |               |                 |
 Initialize        |<--(1)-------------------------|                 |
		   |<--(2)-------------------------------------------|
		   |               |               |                 |
		   |               |               |                 |
     Update        |<--(3)-------------------------------------------|
		   |               |               |<--(4)-----------|
		   |               |               |                 |
		   |               |               |                 |
    Changes        |---------(5)-->|               |                 |
		   |               |---------(6)-->|                 |
		   |-------------------------(7)-->|                 |
		   |               |               |-----------(8)-->|
		   |               |               |                 |
		   |               |               |                 |
     Revert        |               |<--(9)---------|                 |
		   |<--(10)--------|               |                 |
		   |<--(11)------------------------|                 |
		   |               |               |                 |
#+END_EXAMPLE

** Initialize
*** 1. Local Repository -> Workspace
#+BEGIN_EXAMPLE
# 不指定 <directory> 时指当前目录
$ git init [<directory>]
#+END_EXAMPLE

*** 2. Remote Repository -> Workspace
#+BEGIN_EXAMPLE
$ git clone <url of remote repository> [<directory>]
#+END_EXAMPLE

** Update
*** 3. Remote Repository -> Workspace
#+BEGIN_EXAMPLE
$ git pull
#+END_EXAMPLE

*** 4. Remote Repository -> Local Repository
#+BEGIN_EXAMPLE
$ git fetch
#+END_EXAMPLE

** Changes
*** 5. Workspace -> Staging
#+BEGIN_EXAMPLE
$ git add <./dir/file>...
#+END_EXAMPLE

*** 6. Staging -> Local Repository
#+BEGIN_EXAMPLE
$ git commit -m <message>
#+END_EXAMPLE

*** 7. Workspace -> Local Repository
#+BEGIN_EXAMPLE
# 不会提交 untracked 文件
$ git commit -a -m <message>

# 跟上一次的提交合并, 覆盖 message, 同样不会提交 untracked 文件
$ git commit --amend -m <message>
#+END_EXAMPLE

*** 8. Local Repository -> Remote Repository
#+BEGIN_EXAMPLE
$ git push [-u <name> <branch>]
#+END_EXAMPLE

** Revert
*** 9. Local Repository -> Staging
#+BEGIN_EXAMPLE
# 撤销上次提交, 将所有的改动放到 Staging
$ git reset --soft HEAD^
#+END_EXAMPLE

*** 10. Staging -> Workspace
#+BEGIN_EXAMPLE
# 将文件状态从 Staging 移出, 不指定 <file> 时表示所有在 Staging 的文件
$ git reset HEAD [<file>...]

# 丢弃在 Workspace 中的文件改动
$ git checkout -- <file>...
#+END_EXAMPLE

*** 11. Local Repository -> Workspace
#+BEGIN_EXAMPLE
# 撤销上次的提交以及所有的改动(慎用)
$ git reset --hard HEAD^
#+END_EXAMPLE

* 其他操作
** Diff
#+BEGIN_EXAMPLE
# unstaged 与 last commit 比较
$ git diff [<file>]

# staged 与 last commit 比较
$ git diff --staged [<file>]

$ git diff HEAD
$ git diff HEAD^
$ git diff HEAD~5
$ git diff HEAD^..HEAD
$ git diff <long_hash>..<long_hash>
$ git diff <short_hash>..<short_hash>
$ git diff <branch1> <branch2>
$ git diff --since=1.week.ago --until=1.minute.ago
#+END_EXAMPLE

** Log
#+BEGIN_EXAMPLE
$ git log
$ git log --pretty=oneline
$ git log --oneline
$ git log --oneline -p
$ git log --oneline --stat
$ git log --oneline --graph
$ git log --until=1.minute.ago
$ git log --since=1.day.ago
$ git log --since=1.hour.ago
$ git log --since=1.month.ago --until=2.weeks.ago
$ git log --since=2000-01-01 --until=2012-12-21
#+END_EXAMPLE

** Branch
#+BEGIN_EXAMPLE
$ git branch               # 列出分支
$ git branch -r            # 列出远程分支
$ git branch <branch>      # 创建分支
$ git branch -d <branch>   # 删除分支
$ git push origin :cat     # 删除远程的分支

$ git checkout <branch>    # 切换分支
$ git checkout -b <branch> # 创建并切换分支

#+END_EXAMPLE

** Tag
#+BEGIN_EXAMPLE
$ git tag                   # 列出标签
$ git checkout <tag>        # 切换标签
$ git tag -a <tag> -m <msg> # 新建标签
$ git push --tags           # push
#+END_EXAMPLE
* 参考
1. [[https://www.codeschool.com/courses/git-real][Code School - Git Real]]
1. https://sselab.de/lab2/public/wiki/sselab/index.php?title=Git
